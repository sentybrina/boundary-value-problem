import math
from matplotlib import pyplot as plt
from matplotlib import mlab
import numpy
from functions_task2 import *
from rest_series import *

if __name__ == '__main__':
    n = 50
    L = 5
    K_T = 0.2
    alpha = 0.005
    delta_t = 1
    t = 2
    p = 30
    z1 = 0
    z2 = 5
    T = 10
    I = 100
    K = 1000
    k = 500
    eps = 0.0000001
    N = 1
    c = 1.84
    betta = 1
    R = 3
    a = 0.1*R
    #оценка остатка ряда
    r_s = rest_series(L, betta, alpha, p, delta_t, a, K_T, c, N, t)

    #вычисление количества слагаемых в конечном ряду
    while r_s > eps:
        r_s = rest_series(L, betta, alpha, p, delta_t, a, K_T, c, N, t)
        N = N + 1
    print("N = {:f}, r_s = {:f}".format(N, r_s))

    #построение графиков решений

    #вычисление n корней трансцендентного уравнения
    mu = smart_dichotomy_v2(n, K_T, alpha, L)

    #создание и заполнение массива суммы ряда для построения графика аналитического решения
    X = numpy.arange(z1, z2, 1e-3)
    function_U = []
    for z in X:
        function_U.append(sum_series(betta, p, delta_t, L, c, a, n, mu, z, K_T, 0, alpha))

    plt.plot(X, function_U, color="blue", label="график ряда")
    plt.legend()
    plt.grid()
    plt.show()

    #создание и заполнение массива функции пси
    #PSI = [psi(e, betta, p, delta_t, c, a) for e in X]

    c_mas = []
    betta_mas = []
    K_T_mas = []
    x_count = len(X)
    for i in range(x_count):
        if (i < x_count / 2):
            c_mas.append(1)
            betta_mas.append(0.05)
            K_T_mas.append(0.1)
        else:
            c_mas.append(1)
            betta_mas.append(0.5)
            K_T_mas.append(0.5)

    print("-------c-------")
    print(c_mas)
    print("-------betta-------")
    print(betta_mas)
    print("-------K_T-------")
    print(K_T_mas)
    PSI_mas = []
    step = 0
    for e in X:
        PSI_mas.append(psi(e, p, delta_t, R, betta_mas[step], c_mas[step]))
        step = step + 1

    plt.plot(X, PSI_mas, color="red", label="psi")
    plt.legend()
    plt.grid()
    plt.show()


    #построение решения с помощью явной схемы
    t_axis, z_axis, u = full_schema(I, K, T, K_T, c, L, betta, p, delta_t, a, alpha)

    #представление k-ого слоя в виде графика
    plt.plot(z_axis, u[k], label="k слой разностной схемы", color="green")
    plt.legend()
    plt.grid()
    plt.show()


    t_axis, z_axis, u_1 = full_schema(I, 1000, T, K_T, c, L, betta, p, delta_t, a, alpha)
    t_axis, z_axis, u_2 = full_schema(I, 5000, T, K_T, c, L, betta, p, delta_t, a, alpha)
    t_axis, z_axis, u_3 = full_schema(I, 10000, T, K_T, c, L, betta, p, delta_t, a, alpha)

    plt.plot(z_axis, u_1[k], label="k слой РС u_1", color="green")
    plt.plot(z_axis, u_2[k], label="k слой РС u_2", color="blue")
    plt.plot(z_axis, u_3[k], label="k слой РС u_3", color="purple")
    plt.legend()
    plt.grid()
    plt.show()

"""   
    z_, t_ = numpy.meshgrid(z_axis, t_axis)
    fig = plt.figure()
    # без следующей строчки не работает projection='3d'
    from mpl_toolkits.mplot3d import Axes3D
    ax = fig.add_subplot(1, 1, 1, projection='3d')

    surf = ax.plot_surface(z_, t_, numpy.array(u), cmap='RdYlGn')
    plt.show()
  
"""

