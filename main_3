import math
from matplotlib import pyplot as plt
from matplotlib import mlab
import numpy
from functions_task2 import *
from rest_series import *

if __name__ == '__main__':
    # n = float(input("Введите количество корней n = "))
    # L = float(input("Введите L = "))
    # k = float(input("Введите k = "))
    # alpha = float(input("Введите alpha = "))
    # delta_t = float(input("Введите время delta_t = "))
    # c = float(input("Введите c = "))
    # betta = float(input("Введите betta = "))
    # p = float(input("Введите p = "))
    # a = float(input("Введите a = "))
    # print("Введите границы отрезка z = ")
    # z1 = float(input("z1 = "))
    # z2 = float(input("z2 = "))

    n = 50
    L = 5
    K_T = 0.2
    alpha = 0.005
    delta_t = 0.1
    t = 0
    c = 1.84
    betta = 1
    p = 30
    a = 0.5
    z1 = 0
    z2 = 5
    T = 10
    I = 100
    K = 1000
    k = 500

    mu = smart_dichotomy_v2(n, K_T, alpha, L)

    X = numpy.arange(z1, z2, 1e-3)
    function_U = []
    for z in X:
        function_U.append(sum_series(betta, p, delta_t, L, c, a, n, mu, z, K_T, 0, alpha))

    plt.plot(X, function_U, color="blue", label="график ряда")
    plt.legend()
    plt.grid()
    # plt.show()

    PSI = [psi(e, betta, p, delta_t, c, a) for e in X]

    plt.plot(X, PSI, color="red", label="psi")
    plt.legend()
    plt.grid()
    #plt.show()
    t_axis, z_axis, u = full_schema(I, K, T, K_T, c, L, betta, p, delta_t, a, alpha)

    plt.plot(z_axis, u[k], label="k слой через разностную схему", color="green")
    plt.legend()
    plt.grid()
    plt.show()

    """
    eps = 0.1
    N = 1

    r_s = rest_series(L, betta, alpha, p, delta_t, a, K_T, c, N, t)


    while r_s > eps:
        r_s = rest_series(L, betta, alpha, p, delta_t, a, K_T, c, N, t)
        N = N + 1
    print("N = {:f}, r_s = {:f}".format(N, r_s))


    _W = numpy.arange(-5, 5, 1e-3)
    W = []
    func1 = []
    func2 = []

    max = 10
    for w in _W:
        a = math.tan(w)
        b = (alpha * L) / (K_T * w)
        if abs(a) < 10 and abs(b) < 10:
            func1.append(a)
            func2.append(b)
            W.append(w)

    plt.plot(W, func1, color="blue", label="y(x)=tg(x)")
    plt.scatter(W, func2, color="red", label="y(x)=tg(x)", s=1)
    plt.legend()
    plt.grid()
    plt.show()


    mu = smart_dichotomy_v2(n, K_T, alpha, L)

    X = numpy.arange(z1, z2, 1e-3)
    function_U = []
    for z in X:
       function_U.append(sum_series(betta, p, delta_t, L, c, a, n, mu, z, K_T, t, alpha))

    plt.plot(X, function_U, color="red", label="аналитич. реш.")
    plt.legend()
    plt.grid()
    #plt.show()

    PSI = [psi(e, betta, p, delta_t, c, a) for e in X]
    plt.plot(X, PSI, color="purple", label="psi")
    plt.legend()
    plt.grid()
    plt.show()

    N = 10001
    z, u = schema(I, K, T, K_T, c, L, betta, p, delta_t, a, alpha)
    plt.plot(z, u, color="blue", label="график для разностной схемы (для слоя k=1)")
    plt.legend()
    plt.grid()
    plt.show()
    

    t_axis, z_axis, u_1 = full_schema(I, 1000, T, K_T, c, L, betta, p, delta_t, a, alpha)
    t_axis, z_axis, u_2 = full_schema(I, 5000, T, K_T, c, L, betta, p, delta_t, a, alpha)
    t_axis, z_axis, u_3 = full_schema(I, 10000, T, K_T, c, L, betta, p, delta_t, a, alpha)

    plt.plot(z_axis, u_1[k], label="k слой РС u_1", color="green")
    plt.plot(z_axis, u_2[k], label="k слой РС u_2", color="blue")
    plt.plot(z_axis, u_3[k], label="k слой РС u_3", color="purple")
    plt.legend()
    plt.grid()
    plt.show()

    
    z_, t_ = numpy.meshgrid(z_axis, t_axis)
    fig = plt.figure()
    # без следующей строчки не работает projection='3d'
    from mpl_toolkits.mplot3d import Axes3D
    ax = fig.add_subplot(1, 1, 1, projection='3d')

    surf = ax.plot_surface(z_, t_, numpy.array(u), cmap='RdYlGn')
    plt.show()
    """


