from math import pi, tan, cos, sin, exp

import numpy


def psi(z, betta, p, delta_t, c, a):
    return (betta * exp(-betta * z) * p * delta_t) / (c * pi * a**2)


def function(mu, k, alpha, L):
    return mu*sin(mu)+alpha*L*cos(mu)/k

def dichotomy(a, b, k, alpha, L):
    if a > b:
        a, b = b, a
    eps = 1e-10 # 10^(-10)
    c = 0
    while abs(b - a) > eps:
        c = (a+b) / 2.0
        fc = function(c, k, alpha, L)
        fa = function(a, k, alpha, L)
        if fa * fc > 0:
            a = c
        else:
            b = c
    return c


def smart_dichotomy_v2(n, k, alpha, L):
    roots = []
    i = 0
    while i < n:
        x = dichotomy(pi * i, pi * (i + 1), k, alpha, L)
        roots.append(x)
        print("root [{:d}] = {:f}".format(i, x))
        i = i + 1

    return roots


def integral(b, c, x):
    return exp(c * x) / (c * c + b * b) * (c * cos(b * x) - b * sin(b * x))



def sum_series(betta, p, delta_t, L, c, a, size, mu, z, k, t, alpha):
    n = 0
    sum = 0
    koef = (2 * betta * p * delta_t) / (c * pi * a * a * L)
    while n < size:
        v_n = cos(mu[n] * z / L)
        a_n = (exp(-betta * L) * (-betta - alpha/k) * cos(mu[n]) + betta) / (betta**2 + (mu[n]/L)**2)
        #a_n = integral(b=mu[n] / L, c=-betta, x=L) - integral(b=mu[n] / L, c=-betta, x=0)
        y_n = a_n * exp((-mu[n]) * k * t /c/ L)
        sum = sum + v_n * y_n
        n = n + 1
    a_0 = koef * (exp(-betta*L)-1)/(-betta) / 2
    sum = sum * koef
    sum = sum + a_0
    return sum


def schema(N, k, c, L, betta, p, delta_t, a, alpha):
    I = N - 1
    h_z = L / I
    # h_t = 1e-3, при  I = 10000
    h_t = 10 / I
    gamma = k * h_t / c / h_z / h_z

    u = []
    # u_0 - нулевой слой (k = 0)
    u_0 = []
    # z - массив с координатами точек z: z[i] = i * h_z
    z = []
    for i in range(N):
        u.append(None)
        u_0.append(None)
        z.append(i * h_z)

    for i in range(N):
        u_0[i] = psi(h_z * i, betta, p, delta_t, c, a)

    u[0] = 2 * gamma * u_0[1] + (1 - 2 * gamma) * u_0[0]

    for i in range(1, I):
        u[i] = gamma * (u_0[i + 1] + u_0[i - 1]) + (1 - 2 * gamma) * u_0[i]

    u[I] = 2 * gamma * u_0[I - 1] + (2 * alpha * h_t / c / h_z + 1 - 2 * gamma) * u_0[I]

    return z, u



def full_schema(I, K, k, c, L, betta, p, delta_t, a, alpha):
    """
   Метод возвращает решение на прореженной сетке
   Т.е. функция u(z,t) ищется с помощью разностной схемы,
   затем найденная функция прореживается таким образом, чтобы размерности
   двумерного массива стали одинаковыми, это необходимо для построени графика двумерной сеточной функции
   """
    h_z = L / I
    h_t = 10 / K
    gamma = k * h_t / c / h_z / h_z

    # массив размером  K + 1 на I + 1, shape - размер
    u = numpy.zeros(shape=(K + 1, I + 1))

    for i in range(I + 1):
        u[0][i] = psi(h_z * i, betta, p, delta_t, c, a)

    for j in range(0, K):
        u[j+1][0] = 2 * gamma * u[j][1] + (1 - 2 * gamma) * u[j][0]
        for i in range(1, I):
            u[j + 1][i] = gamma * (u[j][i+1] + u[j][i-1]) + (1 - 2 * gamma) * u[j][i]
        u[j+1][I] = 2 * gamma * u[j][I-1] + (2 * alpha * h_t / c / h_z + 1 - 2 * gamma) * u[j][I]

    q = []
    a = K // I

    for j in range(0, K + 1, a):
        q.append([])
        for i in range(I + 1):
            q[j // a].append(u[j][i])

    t_axis = []
    z_axis = []
    for j in range(0, K + 1, a):
        t_axis.append(j * h_t)

    for i in range(I + 1):
        z_axis.append(i * h_z)

    return t_axis, z_axis, q
